# Modeline {
#	 vi: foldmarker={,} foldmethod=marker foldlevel=0: tabstop=8:
# }

# Allow using ctrl + arrow keys
set-window-option -g xterm-keys on

# General {
	set-option -g status-keys vi 				# Use Vi bindings in tmux command prompt.
	set-option -g history-limit 65536			# Number of tmux commands to remember (2^16).
	set-option -g buffer-limit 16				# Number of copy buffers.
	set-option -g bell-action any				# Any window can cause bell action.
	set-option -g bell-on-alert on				# Ring terminal bell on acitivity.
	#set-option -g lock-after-time 1800			# Lock session after X seconds.
	set-option -g display-time 750				# Time (ms) the message bar is shown.
	# set-option -g set-clipboard				# Try to set the X clipboard. Requires a modification in ~/.Xresources. Does not seems to work.
	# }
# }

# UI {
    # stopped working 1.9
	# set-option set-titles off				# Try to set the title of the client terminal. Set to off or will hinder automatic-rename from working!
	set-option -g default-terminal "screen-256color"	# Use colors.
	set-option -g pane-active-border-fg colour33		# Highlight active pane border with blue.
	set-option -g message-bg "default"			# Color of the message bar.
	set-option -g message-attr "bold"			# Style attributes for status line messages.
	set-option -g visual-activity on			# Notify visually events in monitor-activity enabled windows.
	set-option -g visual-bell off				# Don't disturb.

	# Window {
		set-window-option -g clock-mode-style 24		# Use 24 hour clock.
		#set-window-option -g clock-mode-colour green		# Color of the clock.
		set-window-option -g allow-rename			# Allow programs to rename titles.
		set-window-option -g automatic-rename			# Rename titles automatically.
	# }

	set-option -g status on					# Always show the status bar.
	#set-option -g status-position "bottom"			# Position of the status bar.
	set-option -g status-interval 2				# Update interval in seconds for status bar.
	#  Left status {
		#set-option -g status-justify "left"			# Justification of the window list.
		set-option -g status-justify "centre"			# Justification of the window list.
		set-option -g status-left-length 90			# Maximum length of status.
		# String for the left status.
	#  }

		set-option -g status-right-length 120			# Maximum length of status.
# }

# Bindings {
	# GNU Screen-like {
		unbind-key C-b						# Unbind default prefix key.
		set-option -g prefix C-a				# Prefix key like GNU Screen.
		bind-key a send-prefix					# Send ^A.
		bind-key C-a last-window				# Toogle last window.

		#set-option -g prefix2 C-t				# Prefix that don't interfere with Emacs (so much).
		#bind-key t send-prefix -2				# Send ^T.
		#bind-key C-t last-window				# Toogle last window.

		unbind-key *
		bind-key * list-clients					# List connected clients.

		unbind-key A
		bind-key A command-prompt "rename-window %%"		# Rename window.

		unbind-key " "
		bind-key " " next-window				# Go to next window.
		unbind-key BSpace
		bind-key BSpace previous-window				# Go to previous window.
		unbind-key ^@
		bind-key ^@ next-layout					# Toggle default pane layouts.

		unbind-key '"'
		bind-key '"' choose-window				# Select window from list.

		#unbind-key q
		bind-key Q confirm-before "kill-session"		# Kill active session.
		#bind-key '`' display-panes				# Enumerate panes.

		unbind-key k
		bind-key k confirm-before -p "kill-pane #P? (y/n)"  "kill-pane"			# Kill active pane.
		bind-key K confirm-before -p "kill-window #I? (y/n)"  "kill-window"		# Kill active window.

		unbind-key l
		bind-key l refresh-client				# Redraw screen.
		#bind-key C-l refresh-client				# Redraw screen.

		unbind-key Tab
		bind-key Tab select-pane -t:.+				# Cycle panes forwards.
		unbind-key BTab
		bind-key BTab select-pane -t:.-				# Cycle panes backwards.

		unbind-key x
		bind-key x lock-server
		set-option -g lock-command 'tput civis && read -s -n1'		# Blank screen as lock command.
		# Lock screen with password.
		#bind-key x set-option lock-command 'vlock' \; lock-client \; set-option lock-command 'tput civis && read -s -n1'

	# }

	# Vi-like {
		bind-key M-h select-pane -L		# Select pane left.
		bind-key M-j select-pane -D		# Select pane down.
		bind-key M-k select-pane -U		# Select pane up.
		bind-key M-l select-pane -R		# Select pane right.
		#bind-key M-a last-pane 		# Toggle last pane.

		bind-key M-n select-pane -t:.+		# Cycle panes forwards.
		bind-key M-p select-pane -t:.-		# Cycle panes backwards.

		bind-key < resize-pane -L 2		# Resize width to the left.
		bind-key > resize-pane -R 2		# Resize width to the right.
		#bind-key - resize-pane -D 2		# Resize height down.
		#bind-key + resize-pane -U 2		# Resize height up.

		bind-key -t vi-edit C-p history-up	# Previous command.
		bind-key -t vi-edit C-n history-down	# Next command.
	# }

	# Copy mode {
		bind-key -t vi-copy 'v' begin-selection		# Begin selection in copy mode.
		bind-key -t vi-copy 'C-v' rectangle-toggle	# Begin selection in copy mode.
		bind-key -t vi-copy 'y' copy-selection		# Yank selection in copy mode.
	# }

	#bind-key - split-window -v		# "Horizontal" split.
	#bind-key | split-window -h		# "Vertical" split.

	# Open a new window with CWD set-option in PS1.
	unbind-key c
	bind-key c new-window

	bind-key N select-pane -t:.+		# Cycle panes forwards.
	bind-key P select-pane -t:.-		# Cycle panes backwards.

	# Split horizontally with CWD.
	bind-key - run-shell 'tmux split-window -v "cd \"$(tmux display -p "\$TMUXPWD_#D" | tr -d %)\"; exec $SHELL"'
	# Split vertically with CWD.
	bind-key | run-shell 'tmux split-window -h "cd \"$(tmux display -p "\$TMUXPWD_#D" | tr -d %)\"; exec $SHELL"'
	# Join window/pane to this window. The oposite of 'C-b !'.
	bind-key @ command-prompt -p "create pane from:"  "join-pane -s ':%%'"

	bind h select-pane -L
	bind j select-pane -D
	bind k select-pane -U
	bind l select-pane -R

set-option -g default-shell /bin/zsh
source-file '/root/.powerline/powerline/bindings/tmux/powerline.conf'
